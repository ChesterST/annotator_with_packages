{"ast":null,"code":"import { mapState, mapMutations, mapActions } from \"vuex\";\nexport default {\n  name: \"ClassesBlock\",\n  data() {\n    return {\n      showNewClassInput: false,\n      newClassName: \"\",\n      showDeleteButtons: false\n    };\n  },\n  computed: {\n    ...mapState([\"classes\", \"currentClass\", \"enableKeyboardShortcuts\"])\n  },\n  created() {\n    document.addEventListener('keydown', this.keypress);\n  },\n  watch: {\n    newClassName(now, then) {\n      if (now != then) {\n        this.newClassName = now.toUpperCase();\n      }\n    }\n  },\n  methods: {\n    ...mapMutations([\"setCurrentClass\"]),\n    ...mapActions([\"createNewClass\", \"deleteClass\"]),\n    keypress(event) {\n      if (!this.enableKeyboardShortcuts) {\n        return;\n      }\n      var key = parseInt(event.key);\n      if (!key) {\n        return;\n      }\n      if (key > this.classes.length) {\n        return;\n      }\n      this.setCurrentClass(key - 1);\n      return;\n    },\n    handleRemoveClass(class_id, className) {\n      let sure = confirm(\"Are you sure you want to remove the tag `\" + className + \"`?\\nNOTE: This will NOT affect previously tagged entities.\");\n      if (sure) {\n        this.deleteClass(class_id);\n      }\n    },\n    saveNewClass() {\n      if (!this.newClassName) {\n        return;\n      }\n      const self = this;\n      this.createNewClass(this.newClassName).then(() => {\n        self.showNewClassInput = false;\n        self.newClassName = \"\";\n      });\n    },\n    onInputKeyup(e) {\n      if (e.key === \"Enter\") {\n        this.saveNewClass();\n      }\n    }\n  }\n};","map":{"version":3,"names":["mapState","mapMutations","mapActions","name","data","showNewClassInput","newClassName","showDeleteButtons","computed","created","document","addEventListener","keypress","watch","now","then","toUpperCase","methods","event","enableKeyboardShortcuts","key","parseInt","classes","length","setCurrentClass","handleRemoveClass","class_id","className","sure","confirm","deleteClass","saveNewClass","self","createNewClass","onInputKeyup","e"],"sources":["C:\\Users\\Filip\\GIT_PROJECTS\\annotator_with_packages\\src\\components\\ClassesBlock.vue"],"sourcesContent":["<template>\r\n  <div class=\"q-pa-md\" style=\"border-bottom: 1px solid #ccc;\">\r\n    <div class=\"row\">\r\n      <div class=\"tags\">\r\n        <q-chip\r\n          v-for=\"(cl, index) in classes\"\r\n          :key=\"cl.id\"\r\n          square\r\n          :color=\"cl.id === currentClass.id ? cl.color : 'grey-3'\"\r\n          clickable\r\n          @click=\"setCurrentClass(index)\"\r\n          :removable=\"showDeleteButtons\"\r\n          @remove=\"handleRemoveClass(cl.id, cl.name)\"\r\n        >\r\n          <q-avatar\r\n            v-if=\"cl.id === currentClass.id\"\r\n            :color=\"cl.color.replace('11', '12')\"\r\n            text-color=\"white\"\r\n            :icon=\"'fa fa-check'\"\r\n          ></q-avatar>\r\n          <q-avatar\r\n            v-if=\"cl.id !== currentClass.id\"\r\n            :color=\"cl.color.replace('11', '12')\"\r\n            text-color=\"white\"\r\n            font-size=\"16px\"\r\n          >{{ index + 1 }}</q-avatar>\r\n          {{ cl.name }}\r\n        </q-chip>\r\n      </div>\r\n      <q-space></q-space>\r\n      <div class=\"q-mx-md\">\r\n        <q-input\r\n          bottom-slots\r\n          v-model=\"newClassName\"\r\n          v-if=\"showNewClassInput || classes.length === 0\"\r\n          hint=\"Enter a NER Tag and click [+] to add it\"\r\n          dense\r\n          autofocus\r\n        >\r\n          <template v-slot:append>\r\n            <q-btn\r\n              round\r\n              dense\r\n              flat\r\n              color=\"green-4\"\r\n              icon=\"fa fa-plus\"\r\n              @click=\"saveNewClass\"\r\n            />\r\n            <q-btn\r\n              round\r\n              color=\"red-4\"\r\n              dense\r\n              flat\r\n              icon=\"fa fa-times\"\r\n              @click=\"showNewClassInput = false\"\r\n            />\r\n          </template>\r\n        </q-input>\r\n      </div>\r\n      <div class=\"buttons\">\r\n        <q-btn-group>\r\n          <q-btn outline @click=\"showNewClassInput = true\" label=\"New Tag\" />\r\n          <q-btn\r\n            outline\r\n            @click=\"showDeleteButtons = !showDeleteButtons\"\r\n            :label=\"showDeleteButtons ? 'Lock Tags' : 'Edit Tags'\"\r\n          />\r\n        </q-btn-group>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { mapState, mapMutations, mapActions } from \"vuex\";\r\nexport default {\r\n  name: \"ClassesBlock\",\r\n  data() {\r\n    return {\r\n      showNewClassInput: false,\r\n      newClassName: \"\",\r\n      showDeleteButtons: false,\r\n    };\r\n  },\r\n  computed: {\r\n    ...mapState([\"classes\", \"currentClass\", \"enableKeyboardShortcuts\"]),\r\n  },\r\n  created() {\r\n    document.addEventListener('keydown', this.keypress);\r\n  },\r\n  watch: {\r\n    newClassName(now, then) {\r\n      if (now != then) {\r\n        this.newClassName = now.toUpperCase();\r\n      }\r\n    },\r\n  },\r\n  methods: {\r\n    ...mapMutations([\"setCurrentClass\"]),\r\n    ...mapActions([\"createNewClass\", \"deleteClass\"]),\r\n    keypress(event) {\r\n      if (!this.enableKeyboardShortcuts) {\r\n        return\r\n      }\r\n      var key = parseInt(event.key)\r\n      if (!key) {\r\n        return\r\n      }\r\n      if (key > this.classes.length) {\r\n        return\r\n      }\r\n      \r\n      this.setCurrentClass(key - 1);\r\n      return\r\n    },\r\n    handleRemoveClass(class_id, className) {\r\n      let sure = confirm(\r\n        \"Are you sure you want to remove the tag `\" +\r\n          className +\r\n          \"`?\\nNOTE: This will NOT affect previously tagged entities.\"\r\n      );\r\n      if (sure) {\r\n        this.deleteClass(class_id);\r\n      }\r\n    },\r\n    saveNewClass() {\r\n      if (!this.newClassName) {\r\n        return;\r\n      }\r\n      const self = this;\r\n      this.createNewClass(this.newClassName).then(() => {\r\n        self.showNewClassInput = false;\r\n        self.newClassName = \"\";\r\n      });\r\n    },\r\n    onInputKeyup(e) {\r\n      if (e.key === \"Enter\") {\r\n        this.saveNewClass();\r\n      }\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style lang=\"css\" scoped>\r\n.color-box {\r\n  width: 1rem;\r\n  height: 1rem;\r\n  margin-right: 1rem;\r\n}\r\n</style>\r\n"],"mappings":"AA0EA,SAASA,QAAQ,EAAEC,YAAY,EAAEC,UAAS,QAAS,MAAM;AACzD,eAAe;EACbC,IAAI,EAAE,cAAc;EACpBC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,iBAAiB,EAAE,KAAK;MACxBC,YAAY,EAAE,EAAE;MAChBC,iBAAiB,EAAE;IACrB,CAAC;EACH,CAAC;EACDC,QAAQ,EAAE;IACR,GAAGR,QAAQ,CAAC,CAAC,SAAS,EAAE,cAAc,EAAE,yBAAyB,CAAC;EACpE,CAAC;EACDS,OAAOA,CAAA,EAAG;IACRC,QAAQ,CAACC,gBAAgB,CAAC,SAAS,EAAE,IAAI,CAACC,QAAQ,CAAC;EACrD,CAAC;EACDC,KAAK,EAAE;IACLP,YAAYA,CAACQ,GAAG,EAAEC,IAAI,EAAE;MACtB,IAAID,GAAE,IAAKC,IAAI,EAAE;QACf,IAAI,CAACT,YAAW,GAAIQ,GAAG,CAACE,WAAW,EAAE;MACvC;IACF;EACF,CAAC;EACDC,OAAO,EAAE;IACP,GAAGhB,YAAY,CAAC,CAAC,iBAAiB,CAAC,CAAC;IACpC,GAAGC,UAAU,CAAC,CAAC,gBAAgB,EAAE,aAAa,CAAC,CAAC;IAChDU,QAAQA,CAACM,KAAK,EAAE;MACd,IAAI,CAAC,IAAI,CAACC,uBAAuB,EAAE;QACjC;MACF;MACA,IAAIC,GAAE,GAAIC,QAAQ,CAACH,KAAK,CAACE,GAAG;MAC5B,IAAI,CAACA,GAAG,EAAE;QACR;MACF;MACA,IAAIA,GAAE,GAAI,IAAI,CAACE,OAAO,CAACC,MAAM,EAAE;QAC7B;MACF;MAEA,IAAI,CAACC,eAAe,CAACJ,GAAE,GAAI,CAAC,CAAC;MAC7B;IACF,CAAC;IACDK,iBAAiBA,CAACC,QAAQ,EAAEC,SAAS,EAAE;MACrC,IAAIC,IAAG,GAAIC,OAAO,CAChB,2CAA0C,GACxCF,SAAQ,GACR,4DAA2D,CAC9D;MACD,IAAIC,IAAI,EAAE;QACR,IAAI,CAACE,WAAW,CAACJ,QAAQ,CAAC;MAC5B;IACF,CAAC;IACDK,YAAYA,CAAA,EAAG;MACb,IAAI,CAAC,IAAI,CAACzB,YAAY,EAAE;QACtB;MACF;MACA,MAAM0B,IAAG,GAAI,IAAI;MACjB,IAAI,CAACC,cAAc,CAAC,IAAI,CAAC3B,YAAY,CAAC,CAACS,IAAI,CAAC,MAAM;QAChDiB,IAAI,CAAC3B,iBAAgB,GAAI,KAAK;QAC9B2B,IAAI,CAAC1B,YAAW,GAAI,EAAE;MACxB,CAAC,CAAC;IACJ,CAAC;IACD4B,YAAYA,CAACC,CAAC,EAAE;MACd,IAAIA,CAAC,CAACf,GAAE,KAAM,OAAO,EAAE;QACrB,IAAI,CAACW,YAAY,EAAE;MACrB;IACF;EACF;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}