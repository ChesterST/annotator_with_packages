{"ast":null,"code":"import LocalStorage from 'quasar/src/plugins/LocalStorage.js';\n;\nconst niceColors = [\"red-11\", \"blue-11\", \"light-green-11\", \"deep-orange-11\", \"pink-11\", \"light-blue-11\", \"lime-11\", \"brown-11\", \"purple-11\", \"cyan-11\", \"yellow-11\", \"grey-11\", \"deep-purple-11\", \"teal-11\", \"amber-11\", \"blue-grey-11\", \"indigo-11\", \"green-11\", \"orange-11\"];\nexport const mutations = {\n  setInputSentences(state, payload) {\n    if (!Array.isArray(payload)) {\n      state.originalText = payload;\n      payload = payload.split(state.separator);\n    }\n    state.inputSentences = payload.map((s, i) => ({\n      id: i,\n      text: s\n    }));\n  },\n  addClass(state, payload) {\n    let existing = state.classes.find(c => c.name == payload);\n    if (existing) {\n      return;\n    }\n    let lastIndex = state.classes.reduce((p, c) => {\n      return c.id > p ? c.id : p;\n    }, 0);\n    let newClass = {\n      id: lastIndex + 1,\n      name: payload,\n      color: niceColors[lastIndex % niceColors.length]\n    };\n    state.classes = [...state.classes, newClass];\n    if (state.classes.length === 1) {\n      state.currentClass = state.classes[0];\n    }\n  },\n  removeClass(state, payload) {\n    state.classes = state.classes.filter(c => c.id != payload);\n    if (state.currentClass.id === payload) {\n      state.currentClass = state.classes[0];\n    }\n  },\n  setCurrentClass(state, payload) {\n    state.currentClass = state.classes[payload];\n  },\n  addAnnotation(state, payload) {\n    state.annotations[state.currentIndex] = payload;\n    state.currentAnnotation = payload;\n  },\n  clearAllAnnotations(state) {\n    state.annotations = [];\n    state.currentAnnotation = {};\n  },\n  setSeparator(state, payload) {\n    state.separator = payload;\n    const sentences = state.originalText.split(state.separator);\n    state.inputSentences = sentences.map((s, i) => ({\n      id: i,\n      text: s\n    }));\n  },\n  setAnnotationPrecision(state, payload) {\n    state.annotationPrecision = payload;\n  },\n  setKeyboardShortcuts(state, payload) {\n    state.enableKeyboardShortcuts = payload;\n  },\n  nextSentence(state) {\n    if (state.currentIndex < state.inputSentences.length - 1) {\n      state.currentIndex += 1;\n      state.currentAnnotation = state.annotations[state.currentIndex] || {};\n    } else {\n      alert(\"You have completed all the sentences\");\n    }\n  },\n  previousSentence(state) {\n    if (state.currentIndex > 0) {\n      state.currentIndex -= 1;\n      state.currentAnnotation = state.annotations[state.currentIndex];\n    } else {\n      alert(\"You are at the beginning of all sentences\");\n    }\n  },\n  resetIndex(state) {\n    state.currentIndex = 0;\n  },\n  loadClasses(state, payload) {\n    if (!Array.isArray(payload)) {\n      throw new Error(\"loadClasses: payload must be an array\");\n    }\n    let isValid = payload.reduce((acc, curr) => acc && typeof curr === \"object\" && \"id\" in curr && \"name\" in curr && \"color\" in curr, true);\n    if (!isValid) {\n      throw new Error(\"loadClasses: payload has invalid schema\");\n    }\n    state.classes = payload;\n    state.currentClass = state.classes[0];\n    LocalStorage.set(\"tags\", state.classes);\n  },\n  loadAnnotations(state, payload) {\n    let isValid = typeof payload === \"object\" && \"annotations\" in payload && \"classes\" in payload;\n    if (!isValid) {\n      throw new Error(\"loadAnnotations: payload has invalid schema\");\n    }\n    let annotations = payload.annotations;\n    if (!Array.isArray(annotations)) {\n      throw new Error(\"loadAnnotations: payload must be an array\");\n    }\n    let newAnnotations = [];\n    for (var i = 0; i < annotations.length; i++) {\n      if (annotations[i] == null) continue;\n      let annotation = {\n        'text': annotations[i][0],\n        'entities': annotations[i][1].entities\n      };\n      newAnnotations[i] = annotation;\n    }\n    state.annotations = newAnnotations;\n    state.currentAnnotation = state.annotations[state.currentIndex];\n  }\n};\nexport const getters = {};\nconst actions = {\n  createNewClass({\n    commit,\n    state\n  }, className) {\n    return new Promise((resolve, reject) => {\n      commit(\"addClass\", className);\n      try {\n        LocalStorage.set(\"tags\", state.classes);\n      } catch (e) {\n        reject(e);\n      }\n      resolve();\n    });\n  },\n  deleteClass({\n    commit,\n    state\n  }, classId) {\n    commit(\"removeClass\", classId);\n    LocalStorage.set(\"tags\", state.classes);\n  }\n};\nwindow.addEventListener('beforeunload', async event => {\n  event.returnValue = \"Please make sure you export annotations before closing the file.\";\n});\nexport default {\n  state() {\n    let tags = LocalStorage.getItem(\"tags\");\n    return {\n      annotations: [],\n      classes: tags || [],\n      inputSentences: [],\n      originalText: \"\",\n      separator: \"\\n\",\n      enableKeyboardShortcuts: false,\n      annotationPrecision: \"word\",\n      // current state\n      currentAnnotation: {},\n      currentClass: tags && tags[0] || {},\n      currentIndex: 0,\n      currentSentence: \"\"\n    };\n  },\n  getters,\n  mutations,\n  actions\n};","map":{"version":3,"names":["LocalStorage","niceColors","mutations","setInputSentences","state","payload","Array","isArray","originalText","split","separator","inputSentences","map","s","i","id","text","addClass","existing","classes","find","c","name","lastIndex","reduce","p","newClass","color","length","currentClass","removeClass","filter","setCurrentClass","addAnnotation","annotations","currentIndex","currentAnnotation","clearAllAnnotations","setSeparator","sentences","setAnnotationPrecision","annotationPrecision","setKeyboardShortcuts","enableKeyboardShortcuts","nextSentence","alert","previousSentence","resetIndex","loadClasses","Error","isValid","acc","curr","set","loadAnnotations","newAnnotations","annotation","entities","getters","actions","createNewClass","commit","className","Promise","resolve","reject","e","deleteClass","classId","window","addEventListener","event","returnValue","tags","getItem","currentSentence"],"sources":["C:/Users/Filip/GIT_PROJECTS/annotator_with_packages/src/store/index.js"],"sourcesContent":["import LocalStorage from 'quasar/src/plugins/LocalStorage.js';;\r\n\r\nconst niceColors = [\r\n  \"red-11\",\r\n  \"blue-11\",\r\n  \"light-green-11\",\r\n  \"deep-orange-11\",\r\n  \"pink-11\",\r\n  \"light-blue-11\",\r\n  \"lime-11\",\r\n  \"brown-11\",\r\n  \"purple-11\",\r\n  \"cyan-11\",\r\n  \"yellow-11\",\r\n  \"grey-11\",\r\n  \"deep-purple-11\",\r\n  \"teal-11\",\r\n  \"amber-11\",\r\n  \"blue-grey-11\",\r\n  \"indigo-11\",\r\n  \"green-11\",\r\n  \"orange-11\",\r\n];\r\n\r\nexport const mutations = {\r\n  setInputSentences(state, payload) {\r\n    if (!Array.isArray(payload)) {\r\n      state.originalText = payload;\r\n      payload = payload.split(state.separator);\r\n    }\r\n    state.inputSentences = payload.map((s, i) => ({ id: i, text: s }));\r\n  },\r\n  addClass(state, payload) {\r\n    let existing = state.classes.find((c) => c.name == payload);\r\n    if (existing) {\r\n      return;\r\n    }\r\n    let lastIndex = state.classes.reduce((p, c) => {\r\n      return c.id > p ? c.id : p;\r\n    }, 0);\r\n    let newClass = {\r\n      id: lastIndex + 1,\r\n      name: payload,\r\n      color: niceColors[lastIndex % niceColors.length],\r\n    }\r\n    state.classes = [...state.classes, newClass];\r\n    if (state.classes.length === 1) {\r\n      state.currentClass = state.classes[0];\r\n    }\r\n  },\r\n  removeClass(state, payload) {\r\n    state.classes = state.classes.filter((c) => c.id != payload);\r\n    if (state.currentClass.id === payload) {\r\n      state.currentClass = state.classes[0];\r\n    }\r\n  },\r\n  setCurrentClass(state, payload) {\r\n    state.currentClass = state.classes[payload];\r\n  },\r\n  addAnnotation(state, payload) {\r\n    state.annotations[state.currentIndex] = payload;\r\n    state.currentAnnotation = payload;\r\n  },\r\n  clearAllAnnotations(state) {\r\n    state.annotations = [];\r\n    state.currentAnnotation = {};\r\n  },\r\n  setSeparator(state, payload) {\r\n    state.separator = payload;\r\n    const sentences = state.originalText.split(state.separator);\r\n    state.inputSentences = sentences.map((s, i) => ({ id: i, text: s }));\r\n  },\r\n  setAnnotationPrecision(state, payload) {\r\n    state.annotationPrecision = payload;\r\n  },\r\n  setKeyboardShortcuts(state, payload) {\r\n    state.enableKeyboardShortcuts = payload;\r\n  },\r\n  nextSentence(state) {\r\n    if (state.currentIndex < state.inputSentences.length - 1) {\r\n      state.currentIndex += 1;\r\n      state.currentAnnotation = state.annotations[state.currentIndex] || {};\r\n    } else {\r\n      alert(\"You have completed all the sentences\");\r\n    }\r\n  },\r\n  previousSentence(state) {\r\n    if (state.currentIndex > 0) {\r\n      state.currentIndex -= 1;\r\n      state.currentAnnotation = state.annotations[state.currentIndex];\r\n    } else {\r\n      alert(\"You are at the beginning of all sentences\");\r\n    }\r\n  },\r\n  resetIndex(state) {\r\n    state.currentIndex = 0;\r\n  },\r\n  loadClasses(state, payload) {\r\n    if (!Array.isArray(payload)) {\r\n      throw new Error(\"loadClasses: payload must be an array\");\r\n    }\r\n    let isValid = payload.reduce(\r\n      (acc, curr) =>\r\n        acc &&\r\n        typeof curr === \"object\" &&\r\n        \"id\" in curr &&\r\n        \"name\" in curr &&\r\n        \"color\" in curr,\r\n      true\r\n    );\r\n    if (!isValid) {\r\n      throw new Error(\"loadClasses: payload has invalid schema\");\r\n    }\r\n    state.classes = payload;\r\n    state.currentClass = state.classes[0];\r\n    LocalStorage.set(\"tags\", state.classes);\r\n  },\r\n  loadAnnotations(state, payload) {\r\n    let isValid = typeof payload === \"object\" &&\r\n    \"annotations\" in payload &&\r\n    \"classes\" in payload;\r\n\r\n    if (!isValid) {\r\n      throw new Error(\"loadAnnotations: payload has invalid schema\");\r\n    }\r\n\r\n    let annotations = payload.annotations;\r\n    if (!Array.isArray(annotations)) {\r\n      throw new Error(\"loadAnnotations: payload must be an array\");\r\n    }\r\n\r\n    let newAnnotations = [];\r\n\r\n    for (var i = 0; i < annotations.length; i++) {\r\n      if (annotations[i] == null) continue;\r\n      let annotation = {\r\n        'text': annotations[i][0],\r\n        'entities': annotations[i][1].entities,\r\n      }\r\n      newAnnotations[i] = annotation;\r\n    }\r\n    state.annotations = newAnnotations;\r\n    state.currentAnnotation = state.annotations[state.currentIndex];\r\n  },\r\n};\r\n\r\nexport const getters = {};\r\n\r\nconst actions = {\r\n  createNewClass({ commit, state }, className) {\r\n    return new Promise((resolve, reject) => {\r\n      commit(\"addClass\", className);\r\n      try {\r\n        LocalStorage.set(\"tags\", state.classes);\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n      resolve();\r\n    });\r\n  },\r\n  deleteClass({ commit, state }, classId) {\r\n    commit(\"removeClass\", classId);\r\n    LocalStorage.set(\"tags\", state.classes);\r\n  },\r\n};\r\n\r\nwindow.addEventListener('beforeunload', async (event) => {\r\n  event.returnValue = \"Please make sure you export annotations before closing the file.\";\r\n});\r\n\r\nexport default {\r\n  state() {\r\n    let tags = LocalStorage.getItem(\"tags\");\r\n    return {\r\n      annotations: [],\r\n      classes: tags || [],\r\n      inputSentences: [],\r\n      originalText: \"\",\r\n      separator: \"\\n\",\r\n      enableKeyboardShortcuts: false,\r\n      annotationPrecision: \"word\",\r\n      // current state\r\n      currentAnnotation: {},\r\n      currentClass: tags && tags[0] || {},\r\n      currentIndex: 0,\r\n      currentSentence: \"\",\r\n    };\r\n  },\r\n  getters,\r\n  mutations,\r\n  actions,\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}